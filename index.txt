<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>نظام الملاحة والتتبع الذكي</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Arial, sans-serif; background: #000; overflow: hidden; height: 100vh; }
        #map { height: 100vh; width: 100%; }
        
        /* Navigation HUD - Top Center */
        .navigation-hud { 
            position: absolute; 
            top: 10px; 
            left: 50%; 
            transform: translateX(-50%); 
            background: rgba(0, 0, 0, 0.9); 
            backdrop-filter: blur(10px); 
            color: white; 
            padding: 10px 15px; 
            border-radius: 10px; 
            border: 1px solid rgba(255, 255, 255, 0.1); 
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); 
            z-index: 1000; 
            width: 250px; 
            text-align: center; 
        }
        .speed-indicator { font-size: 1.8rem; font-weight: bold; color: #00ff88; text-shadow: 0 0 8px rgba(0, 255, 136, 0.5); margin-bottom: 5px; }
        .distance-info { display: flex; justify-content: space-between; margin: 8px 0; font-size: 0.9rem; }
        .eta-info { background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); padding: 8px; border-radius: 8px; margin: 8px 0; font-size: 0.9rem; }
        
        /* Left Panel - Combined Controls */
        .left-panel { 
            position: absolute; 
            top: 50%; 
            left: 10px; 
            transform: translateY(-50%); 
            background: rgba(0, 0, 0, 0.9); 
            backdrop-filter: blur(10px); 
            color: white; 
            padding: 10px; 
            border-radius: 10px; 
            border: 1px solid rgba(255, 255, 255, 0.1); 
            z-index: 1000; 
            width: 160px; 
        }
        
        /* Right Panel - Combined Location Info */
        .right-panel { 
            position: absolute; 
            top: 50%; 
            right: 10px; 
            transform: translateY(-50%); 
            background: rgba(0, 0, 0, 0.9); 
            backdrop-filter: blur(10px); 
            color: white; 
            padding: 10px; 
            border-radius: 10px; 
            border: 1px solid rgba(255, 255, 255, 0.1); 
            z-index: 1000; 
            width: 160px; 
        }
        
        .btn-modern { 
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); 
            border: none; 
            color: white; 
            padding: 8px 10px; 
            border-radius: 6px; 
            margin: 3px 0; 
            transition: all 0.3s ease; 
            font-weight: 500; 
            font-size: 0.8rem; 
            width: 100%; 
        }
        .btn-modern:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4); color: white; }
        .btn-danger-modern { background: linear-gradient(45deg, #ff6b6b 0%, #ee5a24 100%); }
        .btn-success-modern { background: linear-gradient(45deg, #00d2ff 0%, #3a7bd5 100%); }
        
        .info-item { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin: 6px 0; 
            padding: 3px 0; 
            border-bottom: 1px solid rgba(255, 255, 255, 0.1); 
            font-size: 0.8rem; 
        }
        .info-label { font-weight: 500; opacity: 0.8; }
        .info-value { font-weight: bold; color: #00ff88; font-size: 0.8rem; }
        
        .compass { 
            width: 40px; 
            height: 40px; 
            border-radius: 50%; 
            background: radial-gradient(circle, #667eea 0%, #764ba2 100%); 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            margin: 8px auto; 
            position: relative; 
            box-shadow: 0 0 15px rgba(102, 126, 234, 0.3); 
        }
        .compass::before { content: '↑'; color: white; font-size: 1.2rem; font-weight: bold; }
        
        .panel-title {
            font-size: 0.9rem;
            text-align: center;
            margin-bottom: 8px;
            color: #00ff88;
            font-weight: bold;
        }
        
        .form-check {
            margin-top: 8px;
            font-size: 0.8rem;
        }
        .form-check-input {
            margin-left: 5px;
        }

        /* Feedback Panel */
        .feedback-panel {
            position: absolute;
            bottom: 60px;
            left: 10px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 1000;
            width: 300px;
            display: none;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
        }
        .feedback-panel h6 {
            color: #00ff88;
            margin-bottom: 10px;
            text-align: center;
        }
        .feedback-form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .feedback-form select, .feedback-form textarea {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 6px;
            padding: 8px;
            font-size: 0.8rem;
        }
        .feedback-form textarea {
            resize: vertical;
            min-height: 60px;
        }
        .star-rating {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .star-rating i {
            color: #666;
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.2s;
        }
        .star-rating i.active {
            color: gold;
        }
        .feedback-toggle {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: linear-gradient(45deg, #ff6b6b 0%, #ee5a24 100%);
            border: none;
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            z-index: 1000;
            cursor: pointer;
            font-size: 0.8rem;
            box-shadow: 0 3px 10px rgba(238, 90, 36, 0.4);
        }
        .feedback-toggle:hover {
            transform: translateY(-2px);
        }

        /* Export Button */
        .export-btn {
            position: absolute;
            bottom: 50px;
            left: 10px;
            background: linear-gradient(45deg, #00d2ff 0%, #3a7bd5 100%);
            border: none;
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            z-index: 1000;
            cursor: pointer;
            font-size: 0.8rem;
            box-shadow: 0 3px 10px rgba(58, 123, 213, 0.4);
        }
        .export-btn:hover {
            transform: translateY(-2px);
        }

        /* Nearby Branches Panel */
        .branches-panel {
            position: absolute;
            top: 60px;
            right: 10px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 1000;
            width: 300px;
            display: none;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
        }
        .branches-panel h6 {
            color: #00ff88;
            margin-bottom: 10px;
            text-align: center;
        }
        .branches-list {
            max-height: 300px;
            overflow-y: auto;
        }
        .branch-item {
            padding: 8px;
            margin: 5px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .branch-item:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .branch-distance {
            color: #00ff88;
            font-size: 0.8rem;
        }

        /* Contact Buttons */
        .contact-buttons {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 10px;
            z-index: 1000;
        }
        .contact-btn {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s;
        }
        .contact-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }
        .email-btn {
            background: linear-gradient(45deg, #4e54c8, #8f94fb);
        }
        .emergency-btn {
            background: linear-gradient(45deg, #ff416c, #ff4b2b);
        }

        /* Emergency Numbers Panel */
        .emergency-panel {
            position: absolute;
            top: 50px;
            right: 10px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 1000;
            width: 250px;
            display: none;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.5);
        }
        .emergency-panel h6 {
            color: #ff416c;
            margin-bottom: 10px;
            text-align: center;
        }
        .emergency-item {
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .emergency-name {
            font-weight: bold;
        }
        .emergency-number {
            color: #00ff88;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .navigation-hud {
                width: 220px;
                padding: 8px 12px;
            }
            .speed-indicator {
                font-size: 1.5rem;
            }
            .left-panel, .right-panel {
                width: 140px;
                padding: 8px;
            }
            .btn-modern {
                padding: 6px 8px;
                font-size: 0.75rem;
            }
            .info-item, .info-label, .info-value {
                font-size: 0.75rem;
            }
            .panel-title {
                font-size: 0.8rem;
            }
            .feedback-panel, .branches-panel {
                width: 250px;
            }
            .contact-buttons {
                flex-direction: column;
                top: 60px;
                right: 10px;
            }
            .emergency-panel {
                width: 220px;
                right: 10px;
            }
        }
        
        @media (max-width: 500px) {
            .navigation-hud {
                width: 180px;
                top: 5px;
            }
            .speed-indicator {
                font-size: 1.3rem;
            }
            .left-panel, .right-panel {
                width: 120px;
                padding: 6px;
            }
            .btn-modern {
                padding: 5px 6px;
                font-size: 0.7rem;
            }
            .compass {
                width: 35px;
                height: 35px;
            }
            .feedback-panel, .branches-panel {
                width: 220px;
                padding: 10px;
            }
            .feedback-toggle, .export-btn {
                font-size: 0.7rem;
                padding: 6px 12px;
            }
            .contact-buttons {
                top: 50px;
            }
        }
    </style>
</head>
<body>
    <div id="map"></div>
    
    <div class="navigation-hud">
        <div class="speed-indicator" id="current-speed">0 كم/س</div>
        <div class="distance-info">
            <span>المسافة المتبقية</span>
            <span id="remaining-distance">-- كم</span>
        </div>
        <div class="eta-info">
            <span id="eta-time">-- دقيقة</span>
        </div>
    </div>
    
    <div class="left-panel">
        <div class="panel-title">⚙️ إعدادات الملاحة</div>
        <button id="find-nearest-btn" class="btn btn-success-modern">🔍 أقرب وجهة</button>
        <button id="recenter-btn" class="btn btn-modern">📍 توسيط</button>
        <button id="nearby-branches-btn" class="btn btn-modern">🏢 اطلع على مواقعنا القريبة منك</button>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="auto-center" checked>
            <label class="form-check-label" for="auto-center">
                توسيط تلقائي
            </label>
        </div>
    </div>
    
    <div class="right-panel">
        <div class="panel-title">📍 معلومات الموقع</div>
        <div class="info-item">
            <span class="info-label">الإحداثيات:</span>
            <span class="info-value" id="coordinates">--</span>
        </div>
        <div class="info-item">
            <span class="info-label">الدقة:</span>
            <span class="info-value" id="accuracy">-- م</span>
        </div>
        <div class="compass" id="compass"></div>
    </div>

    <!-- Contact Buttons -->
    <div class="contact-buttons">
        <button class="contact-btn email-btn" id="email-btn">📧 البريد الالكتروني</button>
        <button class="contact-btn emergency-btn" id="emergency-btn">🆘 أرقام الطوارئ</button>
    </div>

    <!-- Nearby Branches Panel -->
    <div class="branches-panel" id="branches-panel">
        <h6>المواقع القريبة منك</h6>
        <div class="branches-list" id="branches-list">
            <!-- Will be populated dynamically -->
        </div>
    </div>

    <!-- Emergency Numbers Panel -->
    <div class="emergency-panel" id="emergency-panel">
        <h6>أرقام الطوارئ</h6>
        <div class="emergency-item">
            <div class="emergency-name">الشرطة</div>
            <div class="emergency-number">911</div>
        </div>
        <div class="emergency-item">
            <div class="emergency-name">الإسعاف</div>
            <div class="emergency-number">101</div>
        </div>
        <div class="emergency-item">
            <div class="emergency-name">الدفاع المدني</div>
            <div class="emergency-number">998</div>
        </div>
        <div class="emergency-item">
            <div class="emergency-name">خدمة العملاء</div>
            <div class="emergency-number">920000000</div>
        </div>
    </div>

    <!-- Feedback Toggle Button -->
    <button class="feedback-toggle" id="feedback-toggle">هل تعاني من مشاكل؟</button>

    <!-- Feedback Panel -->
    <div class="feedback-panel" id="feedback-panel">
        <h6>الإبلاغ عن مشكلة</h6>
        <form class="feedback-form" id="feedback-form">
            <div class="star-rating" id="star-rating">
                <i class="fas fa-star" data-rating="1"></i>
                <i class="fas fa-star" data-rating="2"></i>
                <i class="fas fa-star" data-rating="3"></i>
                <i class="fas fa-star" data-rating="4"></i>
                <i class="fas fa-star" data-rating="5"></i>
            </div>
            <select id="problem-type" required>
                <option value="" disabled selected>اختر نوع المشكلة</option>
                <option value="ازدحام أو طوابير طويلة">ازدحام أو طوابير طويلة</option>
                <option value="تعطل الصراف أو توقفه عن العمل">تعطل الصراف أو توقفه عن العمل</option>
                <option value="نفاد النقود (ATM Out of Service)">نفاد النقود (ATM Out of Service)</option>
                <option value="نسيان كلمة المرور أو مشاكل في البطاقة">نسيان كلمة المرور أو مشاكل في البطاقة</option>
                <option value="عدم قبول البطاقة">عدم قبول البطاقة (مثلاً: انتهاء صلاحيتها أو عدم توافقها)</option>
                <option value="أخطاء في قراءة البطاقة أو الماكينة">أخطاء في قراءة البطاقة أو الماكينة</option>
                <option value="انقطاع الكهرباء أو مشاكل الشبكة">انقطاع الكهرباء أو مشاكل الشبكة</option>
                <option value="أخطاء في المبلغ المسحوب">أخطاء في المبلغ المسحوب (مثلاً: عدم استلام كامل المبلغ)</option>
                <option value="فقدان البطاقة بعد السحب">فقدان البطاقة بعد السحب (نسيانها في الماكينة)</option>
                <option value="غير ذلك">غير ذلك</option>
            </select>
            <textarea id="feedback-text" placeholder="أخبرنا بالمزيد عن المشكلة (اختياري)"></textarea>
            <button type="submit" class="btn btn-modern">إرسال التقرير</button>
            <button type="button" id="cancel-feedback" class="btn btn-danger-modern">إلغاء</button>
        </form>
    </div>

    <!-- Export Data Button -->
    <button class="export-btn" id="export-btn">📤 تصدير البيانات</button>

    <script>
        // Initialize Mapbox
        mapboxgl.accessToken = 'pk.eyJ1IjoibW9oYW1tZWQtMTMzMSIsImEiOiJjbHY3dHFsaDcwZWcyMm9xaXBmdHVibm11In0.BDSWP06iKFsCOxq0IwxLBg';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/navigation-night-v1',
            center: [35.2137, 31.7683],
            zoom: 13
        });

        // Variables
        let userLocation = null;
        let userMarker = null;
        let currentRoute = null;
        let destinationMarkers = [];
        let activeDestinationKey = null;
        let currentRating = 0;
        let feedbackData = [];

        // Get DOM elements
        const elements = {
            coordinates: document.getElementById('coordinates'),
            accuracy: document.getElementById('accuracy'),
            speed: document.getElementById('current-speed'),
            compass: document.getElementById('compass'),
            distance: document.getElementById('remaining-distance'),
            eta: document.getElementById('eta-time'),
            autoCenter: document.getElementById('auto-center'),
            feedbackToggle: document.getElementById('feedback-toggle'),
            feedbackPanel: document.getElementById('feedback-panel'),
            feedbackForm: document.getElementById('feedback-form'),
            starRating: document.getElementById('star-rating'),
            stars: document.querySelectorAll('#star-rating i'),
            problemType: document.getElementById('problem-type'),
            feedbackText: document.getElementById('feedback-text'),
            exportBtn: document.getElementById('export-btn'),
            cancelFeedback: document.getElementById('cancel-feedback'),
            findNearestBtn: document.getElementById('find-nearest-btn'),
            recenterBtn: document.getElementById('recenter-btn'),
            nearbyBranchesBtn: document.getElementById('nearby-branches-btn'),
            branchesPanel: document.getElementById('branches-panel'),
            branchesList: document.getElementById('branches-list'),
            emailBtn: document.getElementById('email-btn'),
            emergencyBtn: document.getElementById('emergency-btn'),
            emergencyPanel: document.getElementById('emergency-panel')
        };

        // Destinations data
        const destinations = {
            hospital: { name: "مستشفى المقاصد", coordinates: [35.2167, 31.7697], icon: "🏥", type: "مستشفى" },
            'gas-station': { name: "محطة وقود", coordinates: [35.2098, 31.7645], icon: "⛽", type: "محطة وقود" },
            albireh: { name: "الفرع الرئيسي - البيرة", coordinates: [35.2143, 31.9072], icon: "🏙️", type: "فرع رئيسي" },
            birzeit: { name: "فرع جامعة بيرزيت", coordinates: [35.2038, 31.9707], icon: "🏛️", type: "فرع جامعي" },
            ramallah: { name: "فرع رام الله", coordinates: [35.2056, 31.9026], icon: "🏢", type: "فرع" },
            nablus: { name: "فرع نابلس", coordinates: [35.2605, 32.2215], icon: "🏢", type: "فرع" },
            hebron: { name: "فرع الخليل", coordinates: [35.0998, 31.5326], icon: "🏢", type: "فرع" }
        };

        // Initialize the application
        function initApp() {
            addDestinationMarkers();
            setupEventListeners();
            setupGeolocation();
        }

        // Set up all event listeners
        function setupEventListeners() {
            // Feedback system
            elements.feedbackToggle.addEventListener('click', toggleFeedbackPanel);
            elements.cancelFeedback.addEventListener('click', resetFeedbackForm);
            elements.stars.forEach(star => {
                star.addEventListener('click', setRating);
            });
            elements.feedbackForm.addEventListener('submit', handleFeedbackSubmit);
            
            // Export functionality
            elements.exportBtn.addEventListener('click', exportLocationData);
            
            // Navigation controls
            elements.findNearestBtn.addEventListener('click', findNearestDestination);
            elements.recenterBtn.addEventListener('click', recenterMap);
            elements.nearbyBranchesBtn.addEventListener('click', toggleNearbyBranches);
            
            // Contact buttons
            elements.emailBtn.addEventListener('click', () => {
                window.location.href = "mailto:support@example.com?subject=استفسار";
            });
            elements.emergencyBtn.addEventListener('click', toggleEmergencyPanel);
            
            // Close panels when clicking outside
            document.addEventListener('click', (e) => {
                if (!elements.branchesPanel.contains(e.target) && e.target !== elements.nearbyBranchesBtn) {
                    elements.branchesPanel.style.display = 'none';
                }
                if (!elements.emergencyPanel.contains(e.target) && e.target !== elements.emergencyBtn) {
                    elements.emergencyPanel.style.display = 'none';
                }
                if (!elements.feedbackPanel.contains(e.target) && e.target !== elements.feedbackToggle) {
                    elements.feedbackPanel.style.display = 'none';
                }
            });
            
            // Map events
            map.on('load', () => {
                if (navigator.geolocation) {
                    navigator.geolocation.watchPosition(
                        updateUserLocation,
                        handleGeolocationError,
                        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                    );
                } else {
                    alert("المتصفح لا يدعم نظام تحديد المواقع. يرجى استخدام متصفح أحدث.");
                }
            });
        }

        // Toggle nearby branches panel
        function toggleNearbyBranches() {
            if (!userLocation) {
                alert('الرجاء الانتظار حتى يتم تحديد موقعك الحالي');
                return;
            }
            
            if (elements.branchesPanel.style.display === 'block') {
                elements.branchesPanel.style.display = 'none';
                return;
            }
            
            // Calculate distances and sort branches
            const branchesWithDistance = Object.keys(destinations).map(key => {
                const dest = destinations[key];
                const distance = calculateDistance(
                    userLocation.lat, 
                    userLocation.lng, 
                    dest.coordinates[1], 
                    dest.coordinates[0]
                );
                return {
                    ...dest,
                    key,
                    distance
                };
            }).sort((a, b) => a.distance - b.distance);
            
            // Populate branches list
            elements.branchesList.innerHTML = '';
            branchesWithDistance.forEach(branch => {
                const branchElement = document.createElement('div');
                branchElement.className = 'branch-item';
                branchElement.innerHTML = `
                    <div><strong>${branch.name}</strong></div>
                    <div>${branch.type}</div>
                    <div class="branch-distance">${branch.distance.toFixed(2)} كم</div>
                `;
                branchElement.addEventListener('click', () => {
                    calculateRouteFromCurrent(branch.key);
                    elements.branchesPanel.style.display = 'none';
                });
                elements.branchesList.appendChild(branchElement);
            });
            
            elements.branchesPanel.style.display = 'block';
        }

        // Toggle emergency panel
        function toggleEmergencyPanel() {
            elements.emergencyPanel.style.display = 
                elements.emergencyPanel.style.display === 'block' ? 'none' : 'block';
        }

        // Setup geolocation tracking
        function setupGeolocation() {
            if (navigator.geolocation) {
                navigator.geolocation.watchPosition(
                    updateUserLocation,
                    handleGeolocationError,
                    { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
                );
            }
        }

        // Update user location on map
        function updateUserLocation(position) {
            const { latitude, longitude, accuracy, heading, speed } = position.coords;
            
            // Update UI elements
            elements.coordinates.textContent = `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;
            elements.accuracy.textContent = `${Math.round(accuracy)} م`;
            elements.speed.textContent = speed ? `${(speed * 3.6).toFixed(1)} كم/س` : "0 كم/س";
            
            // Update compass
            updateCompass(heading);
            
            // Update user marker
            updateUserMarker(longitude, latitude);
            
            // Auto-center if enabled
            if (elements.autoCenter.checked) {
                centerMap(longitude, latitude, heading);
            }
            
            // Store current location
            userLocation = { lat: latitude, lng: longitude };
        }

        // Update compass direction
        function updateCompass(heading) {
            if (typeof heading === 'number' && !isNaN(heading)) {
                elements.compass.style.transform = `rotate(${heading}deg)`;
            } else if (window.DeviceOrientationEvent && !window.deviceOrientationListenerAttached) {
                window.addEventListener('deviceorientation', handleOrientation, true);
                window.deviceOrientationListenerAttached = true;
            }
        }

        // Handle device orientation for compass
        function handleOrientation(event) {
            if (event.alpha !== null) {
                elements.compass.style.transform = `rotate(${-event.alpha}deg)`;
            }
        }

        // Update user marker on map
        function updateUserMarker(lng, lat) {
            if (!userMarker) {
                const el = createUserMarker();
                userMarker = new mapboxgl.Marker(el)
                    .setLngLat([lng, lat])
                    .addTo(map);
            } else {
                userMarker.setLngLat([lng, lat]);
            }
        }

        // Create user marker element
        function createUserMarker() {
            const el = document.createElement('div');
            el.innerHTML = `
                <div style="width: 20px; height: 20px; background: #00ff88; border: 3px solid white; 
                border-radius: 50%; box-shadow: 0 0 15px rgba(0, 255, 136, 0.7);"></div>
            `;
            return el;
        }

        // Center map on user location
        function centerMap(lng, lat, heading) {
            const options = {
                center: [lng, lat],
                zoom: 16,
                pitch: 50,
                essential: true
            };
            
            if (typeof heading === 'number' && !isNaN(heading)) {
                options.bearing = heading;
            }
            
            map.flyTo(options);
        }

        // Recenter map button handler
        function recenterMap() {
            if (userLocation) {
                const options = {
                    center: [userLocation.lng, userLocation.lat],
                    zoom: elements.autoCenter.checked ? 16 : 15,
                    pitch: elements.autoCenter.checked ? 50 : 0,
                    essential: true
                };
                
                map.flyTo(options);
            } else {
                alert('الموقع غير متاح بعد لإعادة التوسيط.');
            }
        }

        // Handle geolocation errors
        function handleGeolocationError(error) {
            let message;
            switch (error.code) {
                case error.PERMISSION_DENIED: 
                    message = "تم رفض طلب تحديد الموقع. يرجى السماح للوصول إلى موقعك.";
                    break;
                case error.POSITION_UNAVAILABLE: 
                    message = "معلومات الموقع غير متوفرة حالياً. يرجى التأكد من تشغيل GPS.";
                    break;
                case error.TIMEOUT: 
                    message = "انتهت مهلة طلب تحديد الموقع. يرجى التحقق من اتصالك بالإنترنت أو إشارة GPS.";
                    break;
                default: 
                    message = "حدث خطأ غير معروف/متوقع في نظام تحديد المواقع.";
            }
            
            console.error("GPS Error:", error);
            alert(message);
            
            // Update UI to show error state
            elements.coordinates.textContent = "غير متوفر";
            elements.accuracy.textContent = "--";
            elements.speed.textContent = "0 كم/س";
        }

        // Add destination markers to map
        function addDestinationMarkers() {
            // Clear existing markers
            destinationMarkers.forEach(marker => marker.remove());
            destinationMarkers = [];
            
            // Add new markers
            Object.keys(destinations).forEach(key => {
                const el = document.createElement('div');
                el.innerHTML = `
                    <div style="background: #00ff88; color: white; width: 40px; height: 40px; 
                    border-radius: 50%; display: flex; align-items: center; justify-content: center; 
                    font-size: 1.2rem;">${destinations[key].icon}</div>
                `;
                
                const marker = new mapboxgl.Marker(el)
                    .setLngLat(destinations[key].coordinates)
                    .setPopup(new mapboxgl.Popup().setHTML(`
                        <div style="text-align: center; padding: 10px;">
                            <h6>${destinations[key].name}</h6>
                            <div>${destinations[key].type}</div>
                            <button onclick="window.calculateRouteFromCurrent('${key}')" 
                                    style="background: #00ff88; color: white; border: none; 
                                           padding: 8px 15px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                                انطلق إلى هنا
                            </button>
                        </div>
                    `))
                    .addTo(map);
                
                destinationMarkers.push(marker);
            });
        }

        // Calculate distance between two coordinates
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Earth radius in km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = 
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c; // Distance in km
        }

        // Find nearest destination
        function findNearestDestination() {
            if (!userLocation) {
                alert('الرجاء الانتظار حتى يتم تحديد موقعك الحالي');
                return;
            }
            
            let nearestDistance = Infinity;
            let nearestDestinationKey = null;
            
            Object.keys(destinations).forEach(key => {
                const dest = destinations[key];
                const distance = calculateDistance(
                    userLocation.lat, 
                    userLocation.lng, 
                    dest.coordinates[1], 
                    dest.coordinates[0]
                );
                
                if (distance < nearestDistance) {
                    nearestDistance = distance;
                    nearestDestinationKey = key;
                }
            });
            
            if (nearestDestinationKey) {
                calculateRouteFromCurrent(nearestDestinationKey);
                alert(`أقرب وجهة هي: ${destinations[nearestDestinationKey].name} (${nearestDistance.toFixed(2)} كم)`);
            }
        }

        // Calculate route from current location to destination
        function calculateRouteFromCurrent(destinationKey) {
            if (!userLocation) {
                alert('الرجاء الانتظار حتى يتم تحديد موقعك الحالي');
                return;
            }
            if (destinations[destinationKey]) {
                calculateRoute(userLocation, destinations[destinationKey].coordinates);
                activeDestinationKey = destinationKey;
            }
        }

        // Calculate route to destination
        async function calculateRoute(start, end) {
            try {
                const response = await fetch(
                    `https://api.mapbox.com/directions/v5/mapbox/driving/${start.lng},${start.lat};${end[0]},${end[1]}?geometries=geojson&access_token=${mapboxgl.accessToken}`
                );
                
                const data = await response.json();
                
                if (data.routes && data.routes.length > 0) {
                    currentRoute = data.routes[0];
                    updateRouteOnMap();
                    
                    // Update UI with route info
                    const distance = (currentRoute.distance / 1000).toFixed(1);
                    const etaMinutes = Math.round(currentRoute.duration / 60);
                    
                    elements.distance.textContent = `${distance} كم`;
                    elements.eta.textContent = `${etaMinutes} دقيقة`;
                    
                    // Fit map to route bounds
                    const bounds = new mapboxgl.LngLatBounds();
                    bounds.extend([start.lng, start.lat]);
                    bounds.extend(end);
                    map.fitBounds(bounds, { padding: 50 });
                } else {
                    alert('لم يتم العثور على مسار لهذه الوجهة.');
                }
            } catch (error) {
                console.error('Route calculation error:', error);
                alert('حدث خطأ في حساب المسار. يرجى المحاولة لاحقاً.');
            }
        }

        // Update route on map
        function updateRouteOnMap() {
            // Remove existing route if any
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route');
            }
            
            // Add new route
            map.addSource('route', {
                type: 'geojson',
                data: {
                    type: 'Feature',
                    properties: {},
                    geometry: currentRoute.geometry
                }
            });
            
            map.addLayer({
                id: 'route',
                type: 'line',
                source: 'route',
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                paint: {
                    'line-color': '#00ff88',
                    'line-width': 4
                }
            });
        }

        // Clear current route
        function clearRoute() {
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route');
                elements.distance.textContent = '-- كم';
                elements.eta.textContent = '-- دقيقة';
                currentRoute = null;
                activeDestinationKey = null;
            }
        }

        // Feedback system functions
        function toggleFeedbackPanel() {
            elements.feedbackPanel.style.display = 
                elements.feedbackPanel.style.display === 'block' ? 'none' : 'block';
        }

        function setRating(e) {
            const rating = parseInt(e.target.getAttribute('data-rating'));
            currentRating = rating;
            
            elements.stars.forEach((star, i) => {
                if (i < rating) {
                    star.classList.add('active');
                } else {
                    star.classList.remove('active');
                }
            });
        }

        function handleFeedbackSubmit(e) {
            e.preventDefault();
            
            const problemType = elements.problemType.value;
            const feedbackText = elements.feedbackText.value;
            
            if (!problemType) {
                alert('الرجاء اختيار نوع المشكلة');
                return;
            }
            
            // Create feedback object
            const feedback = {
                rating: currentRating,
                problemType,
                feedbackText,
                location: userLocation,
                timestamp: new Date().toISOString()
            };
            
            // Store feedback
            feedbackData.push(feedback);
            console.log('Feedback submitted:', feedback);
            
            // Show confirmation and reset form
            alert('شكراً لك على ملاحظاتك! تم إرسال تقرير المشكلة.');
            resetFeedbackForm();
        }

        function resetFeedbackForm() {
            elements.feedbackForm.reset();
            elements.stars.forEach(star => star.classList.remove('active'));
            currentRating = 0;
            elements.feedbackPanel.style.display = 'none';
        }

        // Export location data
        function exportLocationData() {
            if (!userLocation) {
                alert('الموقع غير متاح بعد للتصدير');
                return;
            }
            
            // Create GeoJSON data
            const geoData = {
                type: "FeatureCollection",
                features: [
                    {
                        type: "Feature",
                        properties: {
                            name: "الموقع الحالي",
                            timestamp: new Date().toISOString(),
                            speed: elements.speed.textContent,
                            accuracy: elements.accuracy.textContent
                        },
                        geometry: {
                            type: "Point",
                            coordinates: [userLocation.lng, userLocation.lat]
                        }
                    }
                ]
            };
            
            // Include feedback data if available
            if (feedbackData.length > 0) {
                geoData.features.push({
                    type: "Feature",
                    properties: {
                        name: "بيانات التقييمات",
                        feedbacks: feedbackData
                    },
                    geometry: {
                        type: "Point",
                        coordinates: [userLocation.lng, userLocation.lat]
                    }
                });
            }
            
            // Convert to JSON string
            const dataStr = JSON.stringify(geoData, null, 2);
            
            // Create download link
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const exportFileDefaultName = `موقع_${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            alert('تم تصدير بيانات الموقع بنجاح!');
        }

        // Make calculateRouteFromCurrent available globally
        window.calculateRouteFromCurrent = calculateRouteFromCurrent;
        window.clearRoute = clearRoute;

        // Initialize the application
        initApp();
    </script>
</body>
</html>